"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path

import environ
import logfire
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

env = environ.Env(
    ALLOWED_HOSTS=(list, []),
    CORS_ALLOW_HEADERS=(list, []),
    CORS_ALLOWED_ORIGINS=(list, []),
    CSRF_TRUSTED_ORIGINS=(list, []),
    DEBUG=(bool, False),
)

BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

ENV = env("ENV", default=None)
DEBUG = int(env("DEBUG", default=0))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

SECRET_KEY = env("SECRET_KEY", default="test-secret")
ALLOWED_HOSTS = env("ALLOWED_HOSTS")

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.postgres",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.sites",
    "django.contrib.staticfiles",
    # third-party libraries
    "actstream",
    "corsheaders",
    "rest_framework",
    "django_extensions",
    "huey.contrib.djhuey",
    # custom apps
    "mainframe.api",
    "mainframe.api.user",
    "mainframe.api.authentication",
    "mainframe.api.huey_tasks",
    "mainframe.bots",
    "mainframe.crons",
    "mainframe.devices",
    "mainframe.earthquakes",
    "mainframe.exchange",
    "mainframe.expenses",
    "mainframe.finance",
    "mainframe.meals",
    "mainframe.sources",
    "mainframe.transit_lines",
    "mainframe.watchers",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "mainframe.core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "build"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mainframe.core.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Bucharest"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

if DEBUG:
    STATICFILES_DIRS = [
        BASE_DIR / "build" / "static",
    ]
else:
    STATIC_ROOT = BASE_DIR / "build" / "static"

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom user Model
AUTH_USER_MODEL = "api_user.User"

# ##################################################################### #
# ################### REST FRAMEWORK             ###################### #
# ##################################################################### #
AUTHENTICATION_BACKENDS = ["django.contrib.auth.backends.AllowAllUsersModelBackend"]
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "mainframe.api.authentication.backends.ActiveSessionAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "mainframe.core.pagination.MainframePagination",
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "PAGE_SIZE": 25,
}

# ##################################################################### #
#  CORS
# ##################################################################### #

CORS_ALLOW_HEADERS = [
    "accept",
    "authorization",
    "content-type",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
] + env("CORS_ALLOW_HEADERS")
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
] + env("CORS_ALLOWED_ORIGINS")

# ##################################################################### #
#  CSRF
# ##################################################################### #

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
] + env("CSRF_TRUSTED_ORIGINS")

# ##################################################################### #
#  TESTING
# ##################################################################### #

TESTING = False

# ##################################################################### #
#  LOGGING
# ##################################################################### #

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{asctime} - {levelname} - {name} - {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "verbose"},
        "logfire": {"class": "logfire.LogfireLoggingHandler", "formatter": "verbose"},
    },
    "loggers": {
        "django": {"handlers": ["console"], "propagate": False, "level": "INFO"},
        "huey": {"handlers": ["console"], "level": "INFO", "propagate": False},
        "root": {"handlers": ["console"], "level": "INFO", "propagate": False},
    },
}

DEFAULT_CREDIT_ACCOUNT_CLIENT_CODE = env(
    "DEFAULT_CREDIT_ACCOUNT_CLIENT_CODE", default=None
)

HUEY = {
    "huey_class": "huey.RedisHuey",  # Huey's implementation to use.
    "results": True,  # Store return values of tasks.
    "store_none": False,  # If a task returns None, do not save to results.
    "immediate": False,  # If DEBUG=True, run synchronously.
    "utc": True,  # Use UTC for all times internally.
    "blocking": True,  # Perform blocking pop rather than poll Redis.
    "connection": {
        "connection_pool": None,  # Definitely you should use pooling!
        # ... tons of other options, see redis-py for details.
        # huey-specific connection parameters.
        "read_timeout": 1,  # If not polling (blocking pop), use timeout.
        "url": env("REDIS_URL", default=None),  # Allow Redis config via a DSN.
    },
    "consumer": {
        "workers": 3,
        "worker_type": "thread",
        "initial_delay": 0.1,  # Smallest polling interval, same as -d.
        "backoff": 1.15,  # Exponential backoff using this rate, -b.
        "max_delay": 10.0,  # Max possible polling interval, -m.
        "scheduler_interval": 1,  # Check schedule every second, -s.
        "periodic": True,  # Enable crontab feature.
        "check_worker_health": True,  # Enable worker health checks.
        "health_check_interval": 1,  # Check worker health every second.
    },
}
if ENV in ["local", "prod", "rpi"]:
    if ENV == "local":
        INSTALLED_APPS += ["debug_toolbar"]
        MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
        INTERNAL_IPS = ["127.0.0.1"]
        DEBUG_TOOLBAR_CONFIG = {
            "SHOW_TOOLBAR_CALLBACK": lambda request: True,
        }
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": env("DB_DATABASE"),
            "USER": env("DB_USER"),
            "PASSWORD": env("DB_PASSWORD"),
            "HOST": env("DB_HOST"),
            "PORT": env("DB_PORT"),
        }
    }
    if ENV in ("prod", "rpi", "local"):
        logfire.configure(environment=ENV, send_to_logfire="if-token-present")
        logfire.instrument_django()
        sentry_sdk.init(
            dsn=env("SENTRY_DSN"),
            environment=ENV,
            integrations=[DjangoIntegration()],
            traces_sample_rate=1.0,
            send_default_pii=False,
            profiles_sample_rate=1.0,
        )
elif ENV in ["ci", "test"]:
    DEFAULT_CREDIT_ACCOUNT_CLIENT_CODE = 1234567890
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "test_db",
            "USER": "test_user",
            "PASSWORD": "test_pass",
            "HOST": "localhost",
            "PORT": 5432,
        }
    }
else:
    raise ValueError(f"Invalid ENV variable set: {ENV}")


ACTSTREAM_SETTINGS = {"USE_JSONFIELD": True}
SITE_ID = 1
